{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# 数据准备\n",
    "\n",
    "## 连续区间"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2020-02-07T07:11:28.674575Z",
     "start_time": "2020-02-07T07:11:28.670453Z"
    }
   },
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import pandas as pd\n",
    "from utils import *\n",
    "from ngboost.learners import *"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "输出连续区间"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2020-02-07T07:09:16.263074Z",
     "start_time": "2020-02-07T07:09:16.113602Z"
    },
    "code_folding": [],
    "hide_input": true,
    "scrolled": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Continue: [ 0 , 975 ] len: 975 \tNan: [ 976 , 976 ] len: 1\n",
      "Continue: [ 977 , 2216 ] len: 1239 \tNan: [ 2217 , 2221 ] len: 5\n",
      "Continue: [ 2222 , 3498 ] len: 1276 \tNan: [ 3499 , 3560 ] len: 62\n",
      "Continue: [ 3561 , 3572 ] len: 11 \tNan: [ 3573 , 3589 ] len: 17\n",
      "Continue: [ 3590 , 4314 ] len: 724 \tNan: [ 4315 , 4401 ] len: 87\n",
      "Continue: [ 4402 , 6255 ] len: 1853 \tNan: [ 6256 , 6273 ] len: 18\n",
      "Continue: [ 6274 , 6375 ] len: 101 \tNan: [ 6376 , 6376 ] len: 1\n",
      "Continue: [ 6377 , 6417 ] len: 40 \tNan: [ 6418 , 6425 ] len: 8\n",
      "Continue: [ 6426 , 10427 ] len: 4001 \tNan: [ 10428 , 10447 ] len: 20\n",
      "Continue: [ 10448 , 13432 ] len: 2984 \tNan: [ 13433 , 13434 ] len: 2\n",
      "Continue: [ 13435 , 13976 ] len: 541 \tNan: [ 13977 , 13985 ] len: 9\n",
      "Continue: [ 13986 , 14000 ] len: 14 \tNan: [ 14001 , 14009 ] len: 9\n",
      "Continue: [ 14010 , 14024 ] len: 14 \tNan: [ 14025 , 14033 ] len: 9\n",
      "Continue: [ 14034 , 14048 ] len: 14 \tNan: [ 14049 , 14057 ] len: 9\n",
      "Continue: [ 14058 , 14072 ] len: 14 \tNan: [ 14073 , 14077 ] len: 5\n",
      "Continue: [ 14078 , 14387 ] len: 309 \tNan: [ 14388 , 14388 ] len: 1\n",
      "Continue: [ 14389 , 17872 ] len: 3483 \tNan: [ 17873 , 17887 ] len: 15\n",
      "Continue: [ 17888 , 18265 ] len: 377\n"
     ]
    }
   ],
   "source": [
    "path = '/Users/apple/Documents/ML_Project/ML - 2.1/Data/国际西班牙数据.csv'\n",
    "data = load_data(path, add_time=True, describe=False)\n",
    "\n",
    "index = data[data['wind_speed'].isna() |\n",
    "    data['wind_direction'].isna() |\n",
    "    data['wind_power'].isna()]['wind_power'].index.tolist()\n",
    "a = index[0]\n",
    "b=-1\n",
    "for i,x in enumerate(index):\n",
    "    if i<len(index)-1:\n",
    "        if index[i+1] > index[i]+1:\n",
    "            print('Continue: [',b+1, ',', a-1,']','len:',a-b-2,\n",
    "                '\\tNan: [',a, ',',index[i], '] len:',index[i]-a+1)     \n",
    "            a = index[i+1]\n",
    "            b = index[i]\n",
    "    else: \n",
    "        a=index[-15]\n",
    "        print('Continue: [',b+1, ',', a-1,']','len:',a-b-2,\n",
    "                '\\tNan: [',a, ',',index[i], '] len:',index[i]-a+1)     \n",
    "        a=len(data)\n",
    "        b=index[i]\n",
    "        print('Continue: [',b+1, ',', a-1,']','len:',a-b-2)\n",
    "\n",
    "del data"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 可视化"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2020-02-07T07:09:18.922154Z",
     "start_time": "2020-02-07T07:09:18.159335Z"
    },
    "code_folding": [],
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "6402e271389d4eae821c731ae446fc48",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "HBox(children=(FloatProgress(value=0.0, max=1.0), HTML(value='')))"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n"
     ]
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "001d804395f5498f8d2163b04b238451",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "HBox(children=(FloatProgress(value=0.0, max=1.0), HTML(value='')))"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n"
     ]
    }
   ],
   "source": [
    "%config InlineBackend.figure_format='retina'\n",
    "from tqdm.notebook import tqdm as tqdm\n",
    "for day in tqdm(np.arange(1,2)):\n",
    "    plot_module1(year=2017, month=10, day=day, figsize=(8,13), \n",
    "                 save_fig=False, close_fig=True)\n",
    "for day in tqdm(np.arange(1,2)):\n",
    "    plot_module2(year=2017, month=10, day=day, figsize=(8,10), \n",
    "                 save_fig=False, close_fig=True)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# 模型预测"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2020-02-07T13:10:39.331616Z",
     "start_time": "2020-02-07T13:10:37.502172Z"
    }
   },
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import pandas as pd\n",
    "from utils import *\n",
    "from ngboost.learners import *"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "1. linear_svr_learner（0.0245-->0.0189）\n",
    "2. esn_linear_svr_learner（0.0275-->0.0216）\n",
    "3. default_linear_learner（0.0312-->0.0249）\n",
    "4. default_tree_learner（0.04029-->0.0408）\n",
    "5. esn_kernel_ridge_learner（0.0442-->0.0248）\n",
    "6. kernel_ridge_learner（0.0478-->0.03400）\n",
    "7. esn_ridge_learner（0.0482-->0.04177）"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2020-02-07T13:45:48.412983Z",
     "start_time": "2020-02-07T13:45:48.183097Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "get_data(hour_num=0, transform='ws*cos(wd)', drop_time=True, scale=True)\n",
      "\n"
     ]
    }
   ],
   "source": [
    "X_train, X_test, Y_train, Y_test = get_data(hour_num=0, transform='ws*cos(wd)',\n",
    "                                            drop_time=True, scale=True)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## default_linear_learner"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2020-02-07T13:25:50.531933Z",
     "start_time": "2020-02-07T13:25:40.504826Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "NGBRegressor(Base=Ridge(alpha=0.1, copy_X=True, fit_intercept=True,\n",
      "                        max_iter=None, normalize=False, random_state=None,\n",
      "                        solver='auto', tol=0.001),\n",
      "             Dist=<class 'ngboost.distns.normal.Normal'>,\n",
      "             Score=<class 'ngboost.scores.MLE'>, learning_rate=0.01,\n",
      "             minibatch_frac=1.0, n_estimators=500, natural_gradient=True,\n",
      "             tol=0.0001, verbose=True, verbose_eval=100) \n",
      "\n",
      "[iter 0] loss=0.0536 val_loss=0.0000 scale=0.2500 norm=0.1351\n",
      "[iter 100] loss=0.0523 val_loss=0.0000 scale=0.2500 norm=0.1350\n",
      "[iter 200] loss=0.0522 val_loss=0.0000 scale=0.5000 norm=0.2704\n",
      "[iter 300] loss=0.0522 val_loss=0.0000 scale=0.0625 norm=0.0338\n",
      "[iter 400] loss=0.0522 val_loss=0.0000 scale=0.0625 norm=0.0338\n",
      "\n",
      "Test MSE 0.05933442563767048\n",
      "Test NLL 0.008732156016782787\n"
     ]
    }
   ],
   "source": [
    "model_test(Base=default_linear_learner(alpha=0.1),\n",
    "           X_train=X_train, X_test=X_test,\n",
    "           Y_train=Y_train, Y_test=Y_test,\n",
    "          n_estimators=500, verbose_eval=100)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## default_tree_learner"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2020-02-07T13:26:34.766938Z",
     "start_time": "2020-02-07T13:25:50.656856Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "NGBRegressor(Base=DecisionTreeRegressor(criterion='friedman_mse', max_depth=6,\n",
      "                                        max_features=None, max_leaf_nodes=None,\n",
      "                                        min_impurity_decrease=0.0,\n",
      "                                        min_impurity_split=None,\n",
      "                                        min_samples_leaf=1, min_samples_split=2,\n",
      "                                        min_weight_fraction_leaf=0.0,\n",
      "                                        presort=False, random_state=None,\n",
      "                                        splitter='best'),\n",
      "             Dist=<class 'ngboost.distns.normal.Normal'>,\n",
      "             Score=<class 'ngboost.scores.MLE'>, learning_rate=0.01,\n",
      "             minibatch_frac=1.0, n_estimators=1000, natural_gradient=True,\n",
      "             tol=0.0001, verbose=True, verbose_eval=200) \n",
      "\n",
      "[iter 0] loss=0.0536 val_loss=0.0000 scale=1.0000 norm=0.5406\n",
      "[iter 200] loss=-0.2548 val_loss=0.0000 scale=0.0625 norm=0.0314\n",
      "[iter 400] loss=-0.2616 val_loss=0.0000 scale=0.0010 norm=0.0005\n",
      "[iter 600] loss=-0.2616 val_loss=0.0000 scale=0.0002 norm=0.0001\n",
      "[iter 800] loss=-0.2617 val_loss=0.0000 scale=0.0010 norm=0.0005\n",
      "\n",
      "Test MSE 0.052852852671646036\n",
      "Test NLL -0.11096815048584435\n"
     ]
    }
   ],
   "source": [
    "model_test(Base=default_tree_learner(depth=6),\n",
    "           X_train=X_train, X_test=X_test,\n",
    "           Y_train=Y_train, Y_test=Y_test,\n",
    "          n_estimators=1000, verbose_eval=200)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## linear_svr_learner"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2020-02-07T13:26:50.205442Z",
     "start_time": "2020-02-07T13:26:34.853614Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "NGBRegressor(Base=LinearSVR(C=0.05, dual=True, epsilon=0.0, fit_intercept=True,\n",
      "                            intercept_scaling=1.0, loss='epsilon_insensitive',\n",
      "                            max_iter=1000, random_state=None, tol=0.0001,\n",
      "                            verbose=0),\n",
      "             Dist=<class 'ngboost.distns.normal.Normal'>,\n",
      "             Score=<class 'ngboost.scores.MLE'>, learning_rate=0.01,\n",
      "             minibatch_frac=1.0, n_estimators=500, natural_gradient=True,\n",
      "             tol=0.0001, verbose=True, verbose_eval=100) \n",
      "\n",
      "[iter 0] loss=0.0536 val_loss=0.0000 scale=0.0156 norm=0.0084\n",
      "[iter 100] loss=0.0535 val_loss=0.0000 scale=0.0039 norm=0.0021\n",
      "[iter 200] loss=0.0535 val_loss=0.0000 scale=0.0010 norm=0.0005\n",
      "[iter 300] loss=0.0535 val_loss=0.0000 scale=0.0005 norm=0.0003\n",
      "[iter 400] loss=0.0535 val_loss=0.0000 scale=0.0002 norm=0.0001\n",
      "\n",
      "Test MSE 0.059386581649455095\n",
      "Test NLL 0.008966674419051959\n"
     ]
    }
   ],
   "source": [
    "model_test(Base=linear_svr_learner(epsilon=0.0, \n",
    "                                   C=0.05, \n",
    "                                   max_iter=10000),\n",
    "           X_train=X_train, X_test=X_test,\n",
    "           Y_train=Y_train, Y_test=Y_test,\n",
    "          n_estimators=500, verbose_eval=100)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## kernel_ridge_learner"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2020-02-07T13:12:05.784433Z",
     "start_time": "2020-02-07T13:11:55.449597Z"
    },
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "get_data(hour_num=0, transform='ws*cos(wd)', drop_time=True, scale=True)\n",
      "\n",
      "NGBRegressor(Base=KernelRidge(alpha=0.5, coef0=1, degree=3, gamma=None,\n",
      "                              kernel='poly', kernel_params=None),\n",
      "             Dist=<class 'ngboost.distns.normal.Normal'>,\n",
      "             Score=<class 'ngboost.scores.MLE'>, learning_rate=0.01,\n",
      "             minibatch_frac=1.0, n_estimators=500, natural_gradient=True,\n",
      "             tol=0.0001, verbose=True, verbose_eval=10) \n",
      "\n",
      "[iter 0] loss=0.0535 val_loss=0.0000 scale=1.0000 norm=0.5407\n"
     ]
    },
    {
     "ename": "KeyboardInterrupt",
     "evalue": "",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mKeyboardInterrupt\u001b[0m                         Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-5-27b2a6b82f7a>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m      6\u001b[0m            \u001b[0mX_train\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mX_train\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mX_test\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mX_test\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      7\u001b[0m            \u001b[0mY_train\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mY_train\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mY_test\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mY_test\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 8\u001b[0;31m           n_estimators=500, verbose_eval=10)\n\u001b[0m",
      "\u001b[0;32m~/Documents/ML_Project/ML - 2.1/utils.py\u001b[0m in \u001b[0;36mmodel_test\u001b[0;34m(Base, X_train, X_test, Y_train, Y_test, n_estimators, verbose_eval)\u001b[0m\n\u001b[1;32m    170\u001b[0m                        verbose_eval=verbose_eval)\n\u001b[1;32m    171\u001b[0m     \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mngb\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m'\\n'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 172\u001b[0;31m     \u001b[0mngb\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfit\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX_train\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mY_train\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    173\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    174\u001b[0m     \u001b[0mY_preds\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mngb\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mpredict\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX_test\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m//anaconda3/lib/python3.7/site-packages/ngboost/ngboost.py\u001b[0m in \u001b[0;36mfit\u001b[0;34m(self, X, Y, X_val, Y_val, train_loss_monitor, val_loss_monitor)\u001b[0m\n\u001b[1;32m     95\u001b[0m             \u001b[0mgrads\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mS\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mgrad\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mD\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mY_batch\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mnatural\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mnatural_gradient\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     96\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 97\u001b[0;31m             \u001b[0mproj_grad\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfit_base\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX_batch\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mgrads\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     98\u001b[0m             \u001b[0mscale\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mline_search\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mproj_grad\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mP_batch\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mY_batch\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     99\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m//anaconda3/lib/python3.7/site-packages/ngboost/ngboost.py\u001b[0m in \u001b[0;36mfit_base\u001b[0;34m(self, X, grads)\u001b[0m\n\u001b[1;32m     46\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0mfit_base\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mX\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mgrads\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     47\u001b[0m         \u001b[0;31m# models = [self.Base().fit(X, g) for g in grads.T]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 48\u001b[0;31m         \u001b[0mmodels\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mBase\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfit\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mg\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mfor\u001b[0m \u001b[0mg\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mgrads\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mT\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     49\u001b[0m         \u001b[0mfitted\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0marray\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mm\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mpredict\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mfor\u001b[0m \u001b[0mm\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mmodels\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mT\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     50\u001b[0m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mbase_models\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mappend\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mmodels\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m//anaconda3/lib/python3.7/site-packages/ngboost/ngboost.py\u001b[0m in \u001b[0;36m<listcomp>\u001b[0;34m(.0)\u001b[0m\n\u001b[1;32m     46\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0mfit_base\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mX\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mgrads\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     47\u001b[0m         \u001b[0;31m# models = [self.Base().fit(X, g) for g in grads.T]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 48\u001b[0;31m         \u001b[0mmodels\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mBase\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfit\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mg\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mfor\u001b[0m \u001b[0mg\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mgrads\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mT\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     49\u001b[0m         \u001b[0mfitted\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0marray\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mm\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mpredict\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mfor\u001b[0m \u001b[0mm\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mmodels\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mT\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     50\u001b[0m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mbase_models\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mappend\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mmodels\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m//anaconda3/lib/python3.7/site-packages/sklearn/kernel_ridge.py\u001b[0m in \u001b[0;36mfit\u001b[0;34m(self, X, y, sample_weight)\u001b[0m\n\u001b[1;32m    166\u001b[0m         self.dual_coef_ = _solve_cholesky_kernel(K, y, alpha,\n\u001b[1;32m    167\u001b[0m                                                  \u001b[0msample_weight\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 168\u001b[0;31m                                                  copy)\n\u001b[0m\u001b[1;32m    169\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mravel\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    170\u001b[0m             \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdual_coef_\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdual_coef_\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mravel\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m//anaconda3/lib/python3.7/site-packages/sklearn/linear_model/ridge.py\u001b[0m in \u001b[0;36m_solve_cholesky_kernel\u001b[0;34m(K, y, alpha, sample_weight, copy)\u001b[0m\n\u001b[1;32m    185\u001b[0m             \u001b[0;31m#       is raised\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    186\u001b[0m             dual_coef = linalg.solve(K, y, sym_pos=True,\n\u001b[0;32m--> 187\u001b[0;31m                                      overwrite_a=False)\n\u001b[0m\u001b[1;32m    188\u001b[0m         \u001b[0;32mexcept\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mlinalg\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mLinAlgError\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    189\u001b[0m             warnings.warn(\"Singular matrix in solving dual problem. Using \"\n",
      "\u001b[0;32m//anaconda3/lib/python3.7/site-packages/scipy/linalg/basic.py\u001b[0m in \u001b[0;36msolve\u001b[0;34m(a, b, sym_pos, lower, overwrite_a, overwrite_b, debug, check_finite, assume_a, transposed)\u001b[0m\n\u001b[1;32m    247\u001b[0m         lu, x, info = posv(a1, b1, lower=lower,\n\u001b[1;32m    248\u001b[0m                            \u001b[0moverwrite_a\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0moverwrite_a\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 249\u001b[0;31m                            overwrite_b=overwrite_b)\n\u001b[0m\u001b[1;32m    250\u001b[0m         \u001b[0m_solve_check\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mn\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0minfo\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    251\u001b[0m         \u001b[0mrcond\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0minfo\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mpocon\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mlu\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0manorm\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;31mKeyboardInterrupt\u001b[0m: "
     ]
    }
   ],
   "source": [
    "model_test(Base=kernel_ridge_learner(alpha=0.5, \n",
    "                                    kernel=\"poly\",\n",
    "                                    degree=3),\n",
    "           X_train=X_train, X_test=X_test,\n",
    "           Y_train=Y_train, Y_test=Y_test,\n",
    "          n_estimators=500, verbose_eval=10)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## esn_ridge_learner"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2020-02-07T13:57:54.131526Z",
     "start_time": "2020-02-07T13:45:52.280596Z"
    },
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "NGBRegressor(Base=<ngboost.esn_learners.ESN_Ridge_learner object at 0x1a2bac1630>,\n",
      "             Dist=<class 'ngboost.distns.normal.Normal'>,\n",
      "             Score=<class 'ngboost.scores.MLE'>, learning_rate=0.01,\n",
      "             minibatch_frac=1.0, n_estimators=500, natural_gradient=True,\n",
      "             tol=0.0001, verbose=True, verbose_eval=10) \n",
      "\n",
      "[iter 0] loss=0.0535 val_loss=0.0000 scale=1.0000 norm=0.5407\n",
      "[iter 10] loss=-0.0482 val_loss=0.0000 scale=1.0000 norm=0.4917\n",
      "[iter 20] loss=-0.0979 val_loss=0.0000 scale=0.5000 norm=0.2447\n",
      "[iter 30] loss=-0.1217 val_loss=0.0000 scale=0.5000 norm=0.2472\n",
      "[iter 40] loss=-0.1424 val_loss=0.0000 scale=0.5000 norm=0.2512\n",
      "[iter 50] loss=-0.1601 val_loss=0.0000 scale=0.5000 norm=0.2561\n",
      "[iter 60] loss=-0.1717 val_loss=0.0000 scale=0.2500 norm=0.1301\n",
      "[iter 70] loss=-0.1785 val_loss=0.0000 scale=0.2500 norm=0.1314\n",
      "[iter 80] loss=-0.1846 val_loss=0.0000 scale=0.2500 norm=0.1328\n",
      "[iter 90] loss=-0.1901 val_loss=0.0000 scale=0.2500 norm=0.1342\n",
      "[iter 100] loss=-0.1948 val_loss=0.0000 scale=0.2500 norm=0.1356\n",
      "[iter 110] loss=-0.1985 val_loss=0.0000 scale=0.1250 norm=0.0684\n",
      "[iter 120] loss=-0.2002 val_loss=0.0000 scale=0.1250 norm=0.0687\n",
      "[iter 130] loss=-0.2018 val_loss=0.0000 scale=0.1250 norm=0.0690\n",
      "[iter 140] loss=-0.2032 val_loss=0.0000 scale=0.1250 norm=0.0693\n",
      "[iter 150] loss=-0.2045 val_loss=0.0000 scale=0.0625 norm=0.0348\n",
      "[iter 160] loss=-0.2055 val_loss=0.0000 scale=0.1250 norm=0.0699\n",
      "[iter 170] loss=-0.2061 val_loss=0.0000 scale=0.0625 norm=0.0350\n",
      "[iter 180] loss=-0.2066 val_loss=0.0000 scale=0.0625 norm=0.0351\n",
      "[iter 190] loss=-0.2069 val_loss=0.0000 scale=0.0625 norm=0.0352\n",
      "[iter 200] loss=-0.2072 val_loss=0.0000 scale=0.0625 norm=0.0353\n",
      "[iter 210] loss=-0.2075 val_loss=0.0000 scale=0.0625 norm=0.0353\n",
      "[iter 220] loss=-0.2077 val_loss=0.0000 scale=0.0625 norm=0.0354\n",
      "[iter 230] loss=-0.2078 val_loss=0.0000 scale=0.0312 norm=0.0177\n",
      "[iter 240] loss=-0.2079 val_loss=0.0000 scale=0.0312 norm=0.0177\n",
      "[iter 250] loss=-0.2080 val_loss=0.0000 scale=0.0312 norm=0.0177\n",
      "[iter 260] loss=-0.2080 val_loss=0.0000 scale=0.0156 norm=0.0089\n",
      "[iter 270] loss=-0.2081 val_loss=0.0000 scale=0.0312 norm=0.0178\n",
      "[iter 280] loss=-0.2081 val_loss=0.0000 scale=0.0002 norm=0.0001\n",
      "[iter 290] loss=-0.2081 val_loss=0.0000 scale=0.0078 norm=0.0044\n",
      "[iter 300] loss=-0.2082 val_loss=0.0000 scale=0.0078 norm=0.0044\n",
      "[iter 310] loss=-0.2082 val_loss=0.0000 scale=0.0156 norm=0.0089\n",
      "[iter 320] loss=-0.2082 val_loss=0.0000 scale=0.0156 norm=0.0089\n",
      "[iter 330] loss=-0.2082 val_loss=0.0000 scale=0.0156 norm=0.0089\n",
      "[iter 340] loss=-0.2082 val_loss=0.0000 scale=0.0002 norm=0.0001\n",
      "[iter 350] loss=-0.2083 val_loss=0.0000 scale=0.0002 norm=0.0001\n",
      "[iter 360] loss=-0.2083 val_loss=0.0000 scale=0.0002 norm=0.0001\n",
      "[iter 370] loss=-0.2083 val_loss=0.0000 scale=0.0002 norm=0.0001\n",
      "[iter 380] loss=-0.2083 val_loss=0.0000 scale=0.0078 norm=0.0045\n",
      "[iter 390] loss=-0.2083 val_loss=0.0000 scale=0.0002 norm=0.0001\n",
      "[iter 400] loss=-0.2083 val_loss=0.0000 scale=0.0002 norm=0.0001\n",
      "[iter 410] loss=-0.2083 val_loss=0.0000 scale=0.0002 norm=0.0001\n",
      "[iter 420] loss=-0.2083 val_loss=0.0000 scale=0.0002 norm=0.0001\n",
      "[iter 430] loss=-0.2083 val_loss=0.0000 scale=0.0002 norm=0.0001\n",
      "[iter 440] loss=-0.2083 val_loss=0.0000 scale=0.0010 norm=0.0006\n",
      "[iter 450] loss=-0.2083 val_loss=0.0000 scale=0.0002 norm=0.0001\n",
      "[iter 460] loss=-0.2083 val_loss=0.0000 scale=0.0078 norm=0.0045\n",
      "[iter 470] loss=-0.2083 val_loss=0.0000 scale=0.0002 norm=0.0001\n",
      "[iter 480] loss=-0.2083 val_loss=0.0000 scale=0.0078 norm=0.0045\n",
      "[iter 490] loss=-0.2083 val_loss=0.0000 scale=0.0002 norm=0.0001\n",
      "\n",
      "Test MSE 0.02633134779323943\n",
      "Test NLL -0.30062742027014155\n"
     ]
    }
   ],
   "source": [
    "model_test(Base=esn_ridge_learner(n_readout=1000,\n",
    "                                  n_components=100,\n",
    "                                  alpha=0.01),\n",
    "           X_train=X_train, X_test=X_test,\n",
    "           Y_train=Y_train, Y_test=Y_test,\n",
    "          n_estimators=500, verbose_eval=10)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## esn_kernel_ridge_learner"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2020-02-07T13:12:05.806721Z",
     "start_time": "2020-02-07T13:11:24.998Z"
    },
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "model_test(Base=esn_kernel_ridge_learner(n_readout=1000,\n",
    "                                         n_components=100,\n",
    "                                         alpha=1, \n",
    "                                         kernel='poly',\n",
    "                                         degree=3),\n",
    "           X_train=X_train, X_test=X_test,\n",
    "           Y_train=Y_train, Y_test=Y_test,\n",
    "          n_estimators=500, verbose_eval=5)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## esn_linear_svr_learner"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2020-02-07T13:43:13.488557Z",
     "start_time": "2020-02-07T13:27:50.684626Z"
    },
    "code_folding": [],
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "NGBRegressor(Base=<ngboost.esn_learners.ESN_linear_svr_learner object at 0x1a23e3c438>,\n",
      "             Dist=<class 'ngboost.distns.normal.Normal'>,\n",
      "             Score=<class 'ngboost.scores.MLE'>, learning_rate=0.01,\n",
      "             minibatch_frac=1.0, n_estimators=500, natural_gradient=True,\n",
      "             tol=0.0001, verbose=True, verbose_eval=10) \n",
      "\n",
      "[iter 0] loss=0.0535 val_loss=0.0000 scale=0.0312 norm=0.0169\n",
      "[iter 10] loss=0.0534 val_loss=0.0000 scale=0.0156 norm=0.0085\n",
      "[iter 20] loss=0.0534 val_loss=0.0000 scale=0.0156 norm=0.0085\n",
      "[iter 30] loss=0.0534 val_loss=0.0000 scale=0.0156 norm=0.0085\n",
      "[iter 40] loss=0.0534 val_loss=0.0000 scale=0.0156 norm=0.0085\n",
      "[iter 50] loss=0.0534 val_loss=0.0000 scale=0.0078 norm=0.0043\n",
      "[iter 60] loss=0.0534 val_loss=0.0000 scale=0.0078 norm=0.0043\n",
      "[iter 70] loss=0.0534 val_loss=0.0000 scale=0.0078 norm=0.0043\n",
      "[iter 80] loss=0.0534 val_loss=0.0000 scale=0.0078 norm=0.0043\n",
      "[iter 90] loss=0.0534 val_loss=0.0000 scale=0.0078 norm=0.0043\n",
      "[iter 100] loss=0.0534 val_loss=0.0000 scale=0.0039 norm=0.0021\n",
      "[iter 110] loss=0.0534 val_loss=0.0000 scale=0.0078 norm=0.0043\n",
      "[iter 120] loss=0.0534 val_loss=0.0000 scale=0.0039 norm=0.0021\n",
      "[iter 130] loss=0.0534 val_loss=0.0000 scale=0.0039 norm=0.0021\n",
      "[iter 140] loss=0.0534 val_loss=0.0000 scale=0.0020 norm=0.0011\n",
      "[iter 150] loss=0.0534 val_loss=0.0000 scale=0.0039 norm=0.0021\n",
      "[iter 160] loss=0.0534 val_loss=0.0000 scale=0.0039 norm=0.0021\n",
      "[iter 170] loss=0.0534 val_loss=0.0000 scale=0.0002 norm=0.0001\n",
      "[iter 180] loss=0.0534 val_loss=0.0000 scale=0.0039 norm=0.0021\n",
      "[iter 190] loss=0.0534 val_loss=0.0000 scale=0.0005 norm=0.0003\n",
      "[iter 200] loss=0.0534 val_loss=0.0000 scale=0.0002 norm=0.0001\n",
      "[iter 210] loss=0.0534 val_loss=0.0000 scale=0.0002 norm=0.0001\n",
      "[iter 220] loss=0.0534 val_loss=0.0000 scale=0.0039 norm=0.0021\n",
      "[iter 230] loss=0.0534 val_loss=0.0000 scale=0.0002 norm=0.0001\n",
      "[iter 240] loss=0.0534 val_loss=0.0000 scale=0.0002 norm=0.0001\n",
      "[iter 250] loss=0.0534 val_loss=0.0000 scale=0.0039 norm=0.0021\n",
      "[iter 260] loss=0.0534 val_loss=0.0000 scale=0.0002 norm=0.0001\n",
      "[iter 270] loss=0.0534 val_loss=0.0000 scale=0.0002 norm=0.0001\n",
      "[iter 280] loss=0.0534 val_loss=0.0000 scale=0.0002 norm=0.0001\n",
      "[iter 290] loss=0.0534 val_loss=0.0000 scale=0.0020 norm=0.0011\n",
      "[iter 300] loss=0.0534 val_loss=0.0000 scale=0.0002 norm=0.0001\n",
      "[iter 310] loss=0.0534 val_loss=0.0000 scale=0.0002 norm=0.0001\n",
      "[iter 320] loss=0.0534 val_loss=0.0000 scale=0.0020 norm=0.0011\n",
      "[iter 330] loss=0.0534 val_loss=0.0000 scale=0.0005 norm=0.0003\n",
      "[iter 340] loss=0.0534 val_loss=0.0000 scale=0.0020 norm=0.0011\n",
      "[iter 350] loss=0.0534 val_loss=0.0000 scale=0.0020 norm=0.0011\n",
      "[iter 360] loss=0.0534 val_loss=0.0000 scale=0.0002 norm=0.0001\n",
      "[iter 370] loss=0.0534 val_loss=0.0000 scale=0.0002 norm=0.0001\n",
      "[iter 380] loss=0.0534 val_loss=0.0000 scale=0.0002 norm=0.0001\n",
      "[iter 390] loss=0.0534 val_loss=0.0000 scale=0.0002 norm=0.0001\n",
      "[iter 400] loss=0.0534 val_loss=0.0000 scale=0.0020 norm=0.0011\n",
      "[iter 410] loss=0.0534 val_loss=0.0000 scale=0.0005 norm=0.0003\n",
      "[iter 420] loss=0.0534 val_loss=0.0000 scale=0.0002 norm=0.0001\n",
      "[iter 430] loss=0.0534 val_loss=0.0000 scale=0.0005 norm=0.0003\n",
      "[iter 440] loss=0.0534 val_loss=0.0000 scale=0.0002 norm=0.0001\n",
      "[iter 450] loss=0.0534 val_loss=0.0000 scale=0.0002 norm=0.0001\n",
      "[iter 460] loss=0.0534 val_loss=0.0000 scale=0.0002 norm=0.0001\n",
      "[iter 470] loss=0.0534 val_loss=0.0000 scale=0.0002 norm=0.0001\n",
      "[iter 480] loss=0.0534 val_loss=0.0000 scale=0.0002 norm=0.0001\n",
      "[iter 490] loss=0.0534 val_loss=0.0000 scale=0.0002 norm=0.0001\n",
      "\n",
      "Test MSE 0.05941161025633551\n",
      "Test NLL 0.009034566460376333\n"
     ]
    }
   ],
   "source": [
    "model_test(Base=esn_linear_svr_learner(n_readout=1000,\n",
    "                                         n_components=100,\n",
    "                                         epsilon=0.0,\n",
    "                                         C=0.02,\n",
    "                                         max_iter=1000),\n",
    "           X_train=X_train, X_test=X_test,\n",
    "           Y_train=Y_train, Y_test=Y_test,\n",
    "          n_estimators=500, verbose_eval=10)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.3"
  },
  "notify_time": "0",
  "toc": {
   "base_numbering": 1,
   "nav_menu": {},
   "number_sections": true,
   "sideBar": true,
   "skip_h1_title": false,
   "title_cell": "Table of Contents",
   "title_sidebar": "Contents",
   "toc_cell": false,
   "toc_position": {
    "height": "440.86956787109375px",
    "left": "353px",
    "top": "265.4782409667969px",
    "width": "222.60870361328125px"
   },
   "toc_section_display": true,
   "toc_window_display": true
  },
  "varInspector": {
   "cols": {
    "lenName": 16,
    "lenType": 16,
    "lenVar": 40
   },
   "kernels_config": {
    "python": {
     "delete_cmd_postfix": "",
     "delete_cmd_prefix": "del ",
     "library": "var_list.py",
     "varRefreshCmd": "print(var_dic_list())"
    },
    "r": {
     "delete_cmd_postfix": ") ",
     "delete_cmd_prefix": "rm(",
     "library": "var_list.r",
     "varRefreshCmd": "cat(var_dic_list()) "
    }
   },
   "types_to_exclude": [
    "module",
    "function",
    "builtin_function_or_method",
    "instance",
    "_Feature"
   ],
   "window_display": false
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
